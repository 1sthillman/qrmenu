KODLARDA LİNTER HATASI VS OLURSA ONU DÜZELTMEDEN İLERLEME### 🚀 Cursor AI Kuralları: Adisyon Uygulaması (Supabase Realtime)

#### ⚠️ **BU YAP, BU YAPMA** Formatında Kritik Kurallar

---

#### 🔐 **AUTHENTICATION & ROL YÖNETİMİ**
```javascript
// BU YAP
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY, {
  auth: { persistSession: false } // Oturum sürekliliği kapat
});

// BU YAP
const login = async (rol, sifre) => {
  if (
    (rol === "garson" && sifre === "garson123") ||
    (rol === "mutfak" && sifre === "mutfak123") ||
    (rol === "kasiyer" && sifre === "kasiyer123")
  ) {
    localStorage.setItem("currentRole", rol);
    return true;
  }
  return false;
};

// BU YAPMA
// Supabase built-in auth KULLANMA (Şifreler sabit)
```

---

#### 🪑 **MASA YÖNETİMİ (100 Masa)**
```javascript
// BU YAP
const TABLE_COLORS = {
  bos: "#CCCCCC",
  aktif: "#2196F3",
  hazir: "#4CAF50",
  teslim_alindi: "#FF9800",
  servis_edildi: "#9C27B0"
};

// BU YAP
// Masa durum değişimlerinde tetikleyici
supabase
  .channel("masa-durum")
  .on("postgres_changes", { event: "UPDATE", schema: "public", table: "masalar" }, (payload) => {
    updateTableUI(payload.new);
  })
  .subscribe();

// BU YAPMA
// Masa durumunu client-side'da saklama (Sadece DB'den oku)
```

---

#### 📦 **SİPARİŞ YÖNETİMİ (Kritik Mantıklar)**
```javascript
// BU YAP - YENİ SİPARİŞ
const yeniSiparis = async (masaId, urunler, notlar) => {
  const { error } = await supabase.from("siparisler").insert({
    masa_id: masaId,
    urunler: JSON.stringify(urunler), // {1:2, 5:1} format
    notlar,
    durum: "bekliyor",
    is_ek_siparis: (await getMasaDurum(masaId)) === "servis_edildi"
  });

  // BU YAP - MASA DURUM GÜNCELLE
  if (!error) {
    await supabase
      .from("masalar")
      .update({ durum: "aktif" })
      .eq("id", masaId);
  }
};

// BU YAP - EK SİPARİŞ KORUMASI
const siparisOnayla = async (siparisId) => {
  const siparis = await getSiparis(siparisId);
  
  if (siparis.is_ek_siparis) {
    // SADECE YENİ ÜRÜNLERİ MUTFAĞA GÖNDER
    await notifyKitchen(siparis.urunler);
  }
};

// BU YAPMA
// Eski siparişleri mutfağa tekrar gönderme
```

---

#### 👨‍🍳 **MUTFAK PANELİ İŞ AKIŞI**
```javascript
// BU YAP - GERÇEK ZAMANLI SİPARİŞ ALIMI
supabase
  .channel("yeni-siparisler")
  .on("postgres_changes", { event: "INSERT", table: "siparisler" }, (payload) => {
    if (payload.new.durum === "bekliyor") {
      addToKitchenQueue(payload.new);
    }
  })
  .subscribe();

// BU YAP - HAZIRLAMA TAMAMLANDIĞINDA
const siparisHazir = async (siparisId) => {
  const { data } = await supabase
    .from("siparisler")
    .update({ durum: "hazir" })
    .eq("id", siparisId)
    .select("masa_id")
    .single();

  // MASA DURUMUNU GÜNCELLE
  await supabase
    .from("masalar")
    .update({ durum: "hazir" })
    .eq("id", data.masa_id);
};

// BU YAPMA
// Hazırlanan siparişin durumunu manuel olarak değiştirme (Sadece bu fonksiyonu kullan)
```

---

#### 💰 **ÖDEME SİSTEMİ KRİTİK KURALLAR**
```javascript
// BU YAP - PARA ÜSTÜ HESAPLAMA
const calculateChange = (total, paid) => {
  // BU YAP - KUSURAT KONTROLÜ
  const change = Number((paid - total).toFixed(2));
  return change >= 0 ? change : 0;
};

// BU YAP - ÖDEME TAMAMLAMA
const completePayment = async (masaId, paymentType, amountPaid) => {
  const total = await calculateTotal(masaId);
  
  await supabase.from("odemeler").insert({
    masa_id: masaId,
    toplam_tutar: total,
    odeme_tipi: paymentType,
    alinan_tutar: amountPaid
  });

  // BU YAP - MASANIN SIFIRLANMASI
  await resetTable(masaId);
};

// BU YAPMA
// Ödeme alınmadan masa durumunu değiştirme
```

---

#### 🔄 **DURUM SENKRONİZASYONU (Gerçek Zamanlı)**
```javascript
// BU YAP - TÜM PANELLER İÇİN ORTAK YAPILANDIRMA
const setupRealtime = () => {
  // Masalar
  supabase
    .channel("tum-masalar")
    .on("postgres_changes", { event: "*", table: "masalar" }, updateAllTables)
    .subscribe();

  // Siparişler
  supabase
    .channel("tum-siparisler")
    .on("postgres_changes", { event: "*", table: "siparisler" }, updateOrders)
    .subscribe();
};

// BU YAP - OFFLINE DESTEK
const syncOfflineChanges = async () => {
  if (navigator.onLine) {
    await pushLocalChanges(); // IndexedDB'den senkronizasyon
  }
};

// BU YAPMA
// Durum değişikliklerinde setTimeout/setInterval kullanma
```

---

#### 🛡️ **GÜVENLİK KURALLARI (RLS)**
```sql
-- BU YAP - MASA TABLOSU İÇİN
CREATE POLICY "Garson: Sadece durum güncelle"
ON masalar FOR UPDATE USING (
  current_user_role() = 'garson' AND
  (OLD.durum IN ('hazir', 'teslim_alindi') AND
  NEW.durum IN ('teslim_alindi', 'servis_edildi')
);

-- BU YAP - SİPARİŞ TABLOSU İÇİN
CREATE POLICY "Mutfak: Sadece bekleyen siparişler"
ON siparisler FOR SELECT USING (
  current_user_role() = 'mutfak' AND
  durum = 'bekliyor'
);

-- BU YAPMA
-- RLS'leri devre dışı bırakma
```

---

#### 🧪 **TEST KURALLARI (Zorunlu)**
```javascript
// BU YAP - TÜM DURUM GEÇİŞLERİNİ TEST ET
test("Masa durum geçişi: aktif -> hazir -> teslim_alindi -> servis_edildi -> bos", async () => {
  await testStateFlow([1, 2, 3, 4, 0]);
});

// BU YAP - GERÇEK ZAMANLI GECİKME TESTİ
test("Realtime gecikme 500ms altında olmalı", async () => {
  const start = Date.now();
  await triggerStateChange();
  expect(Date.now() - start).toBeLessThan(500);
});

// BU YAP - EK SİPARİŞ SENARYOSU
test("Servis edilmiş masada ek sipariş", async () => {
  await setTableState(5, "servis_edildi");
  await addOrder(5, [/* yeni ürünler */]);
  expect(await getKitchenOrders()).toContain(/* sadece yeni ürünler */);
});

// BU YAPMA
// Ödeme testlerinde gerçek para apileri kullanma
```

---

#### 🚫 **KESİNLİKLE YAPILMAYACAKLAR**
1. **BU YAPMA** - Şifreleri plain text olarak loglama
2. **BU YAPMA** - Masa durumunu localStorage'da saklama
3. **BU YAPMA** - Sipariş onaylama işlemini transaction dışında yapma
4. **BU YAPMA** - Gerçek zamanlı kanalları gereksiz açık bırakma
5. **BU YAPMA** - Ödeme hesaplarında floating point kullanma (BigDecimal yerine)
6. **BU YAPMA** - UI refresh'leri için polling kullanma (Sadece Realtime)

---

#### ✅ **ZORUNLU OPTİMİZASYONLAR**
```sql
-- BU YAP - PERFORMANS İNDEKSLERİ
CREATE INDEX idx_masalar_durum ON masalar(durum);
CREATE INDEX idx_siparisler_masa ON siparisler(masa_id, durum);

-- BU YAP - PARAMETRE OPTİMİZASYONU
ALTER SYSTEM SET shared_buffers = "4GB";
ALTER SYSTEM SET effective_cache_size = "12GB";
```

```javascript
// BU YAP - FRONTEND PERFORMANS
const TableGrid = React.memo(({ tables }) => {
  // 100 masada virtual scroll kullan
  return <VirtualList items={tables} />;
});

// BU YAP - WEB WORKER İLE HESAPLAMALAR
const worker = new Worker("payment.worker.js");
worker.postMessage({ total: 250, paid: 300 });
```

---

### 📦 **Commit Kuralları**
```bash
# BU YAP - ANLAMLI MESAJLAR
git commit -m "feat: Masa durum geçişleri için realtime kanal"
git commit -m "fix: Ek sipariş mutfak karışması düzeltme"

# BU YAPMA
git commit -m "bug fixes"
```

Bu kurallara kesinlikle uyularak geliştirme yapılmalıdır. Her değişiklik sonrası:
1. Tüm durum geçiş testleri çalıştırılacak
2. Realtime gecikme ölçülecek
3. RLS politikaları kontrol edilecek
4. Performans metriklere bakılacak

Proje başarısı için bu kurallar **VAZGEÇİLMEZDİR**!